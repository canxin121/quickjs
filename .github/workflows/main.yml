name: Build, test, release

on:
  push:
    branches:
      - '*'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+.dev[0-9]+'

env:
  PY_VERSIONS_STR: >-
    ["3.11"]
  VERSIONS_LINUX_STR: >-
    ["manylinux2014", "manylinux_2_24"]
  VERSIONS_MACOS_STR: >-
    ["macos-10.15", "macos-11"]
  VERSIONS_WINDOWS_STR: >-
    ["windows-2019"]

jobs:
  pass-env:
    runs-on: ubuntu-latest
    outputs:
      py-versions-str: ${{ steps.set-env.outputs.py-versions-str }}
      versions-linux-str: ${{ steps.set-env.outputs.versions-linux-str }}
      versions-macos-str: ${{ steps.set-env.outputs.versions-macos-str }}
      versions-windows-str: ${{ steps.set-env.outputs.versions-windows-str }}
      is-from-tag-str: ${{ steps.set-env.outputs.is-from-tag-str }}
      is-for-release-str: ${{ steps.set-env.outputs.is-for-release-str }}
    steps:
      - id: set-env
        run: |
          echo "::set-output name=py-versions-str::${{ toJSON(env.PY_VERSIONS_STR) }}"
          echo "::set-output name=versions-linux-str::${{ toJSON(env.VERSIONS_LINUX_STR) }}"
  build:
    needs: pass-env
    strategy:
      matrix:
        python-version: [3.11]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout upstream-quickjs
        uses: actions/checkout@v2
        with:
          repository: bellard/quickjs
          ref: b5e62895c619d4ffc75c9d822c8d85f1ece77e5b
          path: upstream-quickjs

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install C++ Compiler
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "Installing for Windows"
            choco install msys2
            echo "C:\tools\msys64\mingw64\bin" >> $GITHUB_PATH
            echo "C:\tools\msys64\usr\bin" >> $GITHUB_PATH
            C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm mingw-w64-x86_64-gcc"
            C:\tools\msys64\usr\bin\bash -lc "gcc --version"
          elif [ "${{ runner.os }}" == "Linux" ]; then
            echo "Installing for Linux"
            sudo apt-get update
            sudo apt-get install -y g++
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "Installing for macOS"
            brew install gcc
          fi
        shell: bash

      - name: Build wheel distribution
        run: |
          python setup.py bdist_wheel
